//============================================================================
// Name        : EPI_6.cpp
// Author      : Joe
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <limits>
#include <queue>
#include <random>
#include <math.h>

using namespace std;


//helper functions
template <typename T> void displayVector(vector<T> &A, int n)
{
	if (n==0)
	{
		typename std::vector<T>::iterator it;
		for(it = A.begin() ; it != A.end() ; it++)
		{
			cout << *it;
		}
	}
	else
	{
		for(int i=0 ; i<n ; i++)
		{
			cout << A[i];
		}
	}

	cout << endl;
}

template <typename T> void inputVector(vector<T> &A)
{
	T input;
	int size;
	cout << "enter the number of elements: ";
	cin >> size;
	cout << "Enter the values one by one:";
	while(size--)
	{
		cin >> input;
		A.push_back(input);
	}
	cout << endl;
}

//6.1 - Dutch flag program
//o(n) runtime o(1) space complexity
void DutchFlagPartition(int pivot_index, vector<int>* A_ptr)
{
	vector<int>& A = *A_ptr;
	int pivot = A[pivot_index];

	//first pass - group all elements less than the pivot
	int smaller = 0;
	for(int i=0 ; i< A.size() ; i++)
	{
		if (A[i] < pivot)
		{
			swap(A[i], A[smaller++]);
		}
	}

	//second pass - group all elements greater than the pivot
	int larger = A.size() - 1;
	for(int i = A.size() - 1 ; i >=0 && A[i] >= pivot ; i--)
	{
		if(A[i] > pivot)
		{
			swap(A[i], A[larger--]);
		}
	}
}

//6.2 - Add one to the a number represented in the decimal encoded array form
vector<int> plusOne(vector<int> A)
{
	//increment the last digit
	++A.back();
	for(int i = A.size()-1 ; i > 0 && A[i] == 10 ; --i)
	{
		A[i] = 0;
		++A[i-1];
	}
	if (A[0] == 10)
	{
		A[0] = 0;
		A.insert(A.begin(),1);
	}
	return A;
}

//6.5 - eliminate duplicates in a array
//return the number of valid entries in the array
int removeDuplicates(vector<int> &A)
{
	int write_index = 1;

	if(A.empty())
	{
		return 0;
	}

	for(int i=0 ; i<A.size() ; i++)
	{
		if (A[i] != A[write_index - 1])
		{
			A[write_index++] = A[i];
		}
	}
	return write_index;
}

//6.6 - Buy and selll stock once
double buyAndSellOnce(vector<double> &prices)
{

	double min_price_so_far = numeric_limits<double>::max();
	double max_profit = 0;
	vector<double>::iterator it;
	for ( it = prices.begin(); it!= prices.end(); it++)
	{
		double max_profit_today = *it - min_price_so_far;
		max_profit = max(max_profit, max_profit_today);
		min_price_so_far = min(min_price_so_far, *it);
	}
	return max_profit;
}

//6.8 - Print all primes till n - sieve method
vector<int> primesToN(int n)
{
	vector<int> primes;
	deque<bool> is_prime(n+1, true);

	is_prime[0] = is_prime[1] = false;
	primes.push_back(0);
	primes.push_back(1);

	for(int i=0 ; i<n ; i++)
	{
		if(is_prime[i] == true)
		{
			primes.push_back(i);
			for(int j=i ; j<n ; j += i)
			{
				is_prime[j] = false;
			}
		}

	}
	return primes;
}

//6.11 - Random Sampling
void randomSampling(int k, vector<int> *A_ptr)
{
	vector<int> &A = *A_ptr;
	default_random_engine seed((random_device())());

	for(int i=0 ; i<k ; i++)
	{
		swap(A[i], A[uniform_int_distribution<int>{i, static_cast<int>(A.size())-1}(seed)]);
	}
}

//6.16 - Sudoku checker
bool hasDuplicate(const vector<vector<int>>& partial_assigned, int row_start, int row_end, int col_start, int col_end)
{
	bool isPresent(partial_assigned.size(), false);
	for(int i=row_start ; i<row_end ; i++)
	{
		for(int j=col_start ; j<col_end ; j++)
		{
			if(partial_assigned[i][j] != 0 && isPresent(partial_assigned[i][j] == true))
			{
				return true;
			}
		}
	}
	return false;
}

bool  isSudokuValid(const vector<vector<int>>& partial_assigned)
{
	//row constraint
	for(int i=0 ; i<partial_assigned.size() ; i++)
	{
		if(hasDuplicate(partial_assigned, i, i+1, 0, partial_assigned.size()))
		{
			return false;
		}
	}

	//column constraint
	for(int j=0 ; j<partial_assigned.size() ; j++)
	{
		if(hasDuplicate(partial_assigned, 0, partial_assigned.size(), j, j+1))
		{
			return false;
		}
	}

	//grid constraint
	int grid_size = sqrt(partial_assigned.size());
	for(int i=0;i<grid_size;i++)
	{
		for(int j=0;j<grid_size;j++)
		{
			if(hasDuplicate(partial_assigned, grid_size*i, grid_size*(i+1), grid_size*j, grid_size*(j+1)))
			{
				return false;
			}
		}
	}

	return true;
}

int main() {
	int choice;
	vector<int> flag;
	vector<int> decimalEncodedArray;
	vector<double> prices;
	vector<int> primes;
	vector<int> duplicateArray;
	vector<int> randomSamplingArray;

	cout << "EPI 6" << endl;
	do
	{
		cout << "1. Dutch flag partition" << endl << "2. Add 1 to decimal representation of number as array" << endl << "3. Buy and sell stocks once" << endl;
		cout << "4. Print prime to n" << endl << "5. Eliminate duplicates in array" << endl << "6.  Random sampling of data" << endl;
		cout << "enter choice: " ;
		cin >> choice;
	    switch (choice)
	    {
		case 1:
		{
			int pivot;
			inputVector(flag);
			cout << "enter the pivot:";
			cin >> pivot;
			DutchFlagPartition(pivot, &flag);
			displayVector(flag,0);
			break;
		}
		case 2:
		{
			inputVector(decimalEncodedArray);
			decimalEncodedArray = plusOne(decimalEncodedArray);
			displayVector(decimalEncodedArray,0);
			break;
		}
		case 3:
		{
			inputVector(prices);
			double profit = buyAndSellOnce(prices);
			cout << "Max profit = " << profit << endl;
			break;
		}
		case 4:
		{
			int n;
			cout << "enter n:";
			cin >> n;
			primes = primesToN(n);
			displayVector(primes,0);
			break;
		}
		case 5:
		{
			inputVector(duplicateArray);
			sort(duplicateArray.begin(), duplicateArray.end());
			int n = removeDuplicates(duplicateArray);
			cout << "n = " << n << endl;
			displayVector(duplicateArray,n);
			break;
		}
		case 6:
		{
			inputVector(randomSamplingArray);
			int k;
			cout << "enter a value for k < " << randomSamplingArray.size() << ":";
			cin >> k;
			if ( k >= randomSamplingArray.size() )
				cout << "ERROR" << endl;
			else
				randomSampling(k, &randomSamplingAr  ray);
			displayVector(randomSamplingArray, 0);
			break;
		}
		default:
		{
			cout << "Wrong choice - EXIT!";
			return 0;
		}
		}
	}while(true);

	return 0;
}
